Mongo db regex
--------------
1) db.restaurants.find({borough: /Brook/}).count();
2) db.restaurants.find({borough: {$regex: /Brook/}}).count();
3) Avg - db.restaurants.aggregate([{$unwind: "$grades"}, {$group: {_id: "$name", avg: {$avg: "$grades.score"}}}]);
4) elemmatch - db.sales.find({"items": {$elemMatch: {tags: 'school'}}}).count()

5) db.customer.aggregate([{$project: {custName: {$concat: ["$customerName.firstname", " ", "$customerName.lastname"]}}}]);

6) To retrieve the products whose rating field is of 'Null' datatype - db.product_catalog.find(
	{ rating: { $type:"null" } }
)
7) db.product_catalog.insert(
    {
        prodid: 7000001,
        prodname: "iphone 7",
        manufacturer: "apple",
        categories: {main:"electronics",sub:"smartphones"},
        date_of_launch: new Date("2016-09-07"),
        price: 60000,
        colors: ["silver","black","gold","rosegold"]
    }
)

8) insert many - db.product_catalog.insert ( 
[
    {prodid:7000010,prodname:"nosql distilled",publisher:"Addison-Wesley",ISBN:1234567,price:400},
    {prodid:7000011,prodname:"big data: principles and best practices",publisher:"Dreamtech",price:700}
] 
)

9)$eq- To retrieve the names of the products that falls under the 'smartphones' sub category:
 db.product_catalog.find(
	{ "categories.sub":{$eq:"smartphones"} },
	{ _id:0,prodname:1 }
)

10) $lt - To retrieve the product names having price less than '25000':

db.product_catalog.find(
	{ price:{$lt:25000} },
	{ _id:0,prodname:1 }
)

11) $ne - Retrieve the documents that have values other than 'electronics' for the main category:

db.product_catalog.find(
	{ "categories.main":{$ne:"electronics"} }
)

12) $and
Retrieve the details of the 'smartphones' whose price is less than '25000'[inclusive]: db.product_catalog.find(
	{$and:[
			{ "categories.sub":"smartphones" },
			{ price:{$lte:25000} }
	      ]
	} 
)

13)$or
Retrieve the details of the products whose price is greater than or equal to '80000' or products whose manufacturer is 'apple':  db.product_catalog.find( 
	{ $or: [ 
			{ price: { $gte: 80000 } }, 
			{ manufacturer: "apple" } 
	       ] 
	} 
)

14) $not
Retrieve the products where the ISBN value is not equal to 2343454:  db.product_catalog.find( 
		{ ISBN: { $not: { $eq: 2343454 } } 
	    } 
)


15) Regex

{ <field>: { $regex: /pattern/, $options: '<options>' } }
OR
{ <field>: { $regex: 'pattern', $options: '<options>' } }
OR
{ <field>: { $regex: /pattern/<options> } }
OR
{ <field>: /pattern/<options> }

The $options clause takes the following as parameters:

i – Performs a case insensitive match

m – Performs pattern match that consists of anchors i.e. ^ for the beginning, $ for the end

x – Ignores all white space characters in the pattern

s – Allows dot character ( . ) to match all characters

db.product_catalog.find(
	{ prodname:{ $regex:/^iphone/i } }
)


