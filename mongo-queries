Mongo Aggregate
---------------
db.listingsAndReviews.aggregate([
	{$match: {first_review: {$gte: ISODate("2016-01-01"), $lte: ISODate("2016-12-31")}}},
	{ $sort:{ reviewer_name: -1}},
	{ $project: { name: 1, summary: 1, _id: 0}}
]);

Mongo db regex
--------------
1) db.restaurants.find({borough: /Brook/}).count();
2) db.restaurants.find({borough: {$regex: /Brook/}}).count();
3) Avg - db.restaurants.aggregate([{$unwind: "$grades"}, {$group: {_id: "$name", avg: {$avg: "$grades.score"}}}]);
4) elemmatch - db.sales.find({"items": {$elemMatch: {tags: 'school'}}}).count()

5) db.customer.aggregate([{$project: {custName: {$concat: ["$customerName.firstname", " ", "$customerName.lastname"]}}}]);

6) To retrieve the products whose rating field is of 'Null' datatype - db.product_catalog.find(
	{ rating: { $type:"null" } }
)
7) db.product_catalog.insert(
    {
        prodid: 7000001,
        prodname: "iphone 7",
        manufacturer: "apple",
        categories: {main:"electronics",sub:"smartphones"},
        date_of_launch: new Date("2016-09-07"),
        price: 60000,
        colors: ["silver","black","gold","rosegold"]
    }
)

8) insert many - db.product_catalog.insert ( 
[
    {prodid:7000010,prodname:"nosql distilled",publisher:"Addison-Wesley",ISBN:1234567,price:400},
    {prodid:7000011,prodname:"big data: principles and best practices",publisher:"Dreamtech",price:700}
] 
)

9)$eq- To retrieve the names of the products that falls under the 'smartphones' sub category:
 db.product_catalog.find(
	{ "categories.sub":{$eq:"smartphones"} },
	{ _id:0,prodname:1 }
)

10) $lt - To retrieve the product names having price less than '25000':

db.product_catalog.find(
	{ price:{$lt:25000} },
	{ _id:0,prodname:1 }
)

11) $ne - Retrieve the documents that have values other than 'electronics' for the main category:

db.product_catalog.find(
	{ "categories.main":{$ne:"electronics"} }
)

12) $and
Retrieve the details of the 'smartphones' whose price is less than '25000'[inclusive]: db.product_catalog.find(
	{$and:[
			{ "categories.sub":"smartphones" },
			{ price:{$lte:25000} }
	      ]
	} 
)

13)$or
Retrieve the details of the products whose price is greater than or equal to '80000' or products whose manufacturer is 'apple':  db.product_catalog.find( 
	{ $or: [ 
			{ price: { $gte: 80000 } }, 
			{ manufacturer: "apple" } 
	       ] 
	} 
)

14) $not
Retrieve the products where the ISBN value is not equal to 2343454:  db.product_catalog.find( 
		{ ISBN: { $not: { $eq: 2343454 } } 
	    } 
)


15) Regex

{ <field>: { $regex: /pattern/, $options: '<options>' } }
OR
{ <field>: { $regex: 'pattern', $options: '<options>' } }
OR
{ <field>: { $regex: /pattern/<options> } }
OR
{ <field>: /pattern/<options> }

The $options clause takes the following as parameters:

i – Performs a case insensitive match

m – Performs pattern match that consists of anchors i.e. ^ for the beginning, $ for the end

x – Ignores all white space characters in the pattern

s – Allows dot character ( . ) to match all characters

db.product_catalog.find(
	{ prodname:{ $regex:/^iphone/i } }
)


16) update 
db.collection.update(
	{ <<update criteria>> },
	{ <<update action>> },
	{ <<update option>> }
)

Update a single document based on condition
Update the prodname of a book from 'hadoop application architectures' to 'Hadoop architecture':

db.product_catalog.updateOne( 
	{ prodname : "hadoop application architectures" }, 
	{ $set: { "name" : "Hadoop architecture" } } 
)
 

 

Update multiple embedded documents
In the categories field, update the value of gender from 'women' to 'female':

db.product_catalog.updateMany( 
	{"categories.gender":"women"}, 
	{ $set: {"categories.gender":"female"} } 
)
 

 

Using upsert to update documents else insert
db.product_catalog.updateMany(
      { "price" : { $gt : 80000 }, "manufacturer" : "apple" },
      { $set: { "prodname" : "iphone 7 plus" } },
      { upsert: true } 
)
The operation updates all the documents with price greater than '80000' and manufacturer  'apple'.
If there are no documents matching the given criteria, a new document would be inserted.

$inc
Decrease the price of the book with ISBN '1979891' by 20:

db.product_catalog.update(
	{ ISBN: 1979891 },
	{ $inc: { price: -20 } }
)
 

 

$max
Update the price of the product with prodid '7000022' to '27500' if the given new value is greater than the current value:

db.product_catalog.update(
	{ prodid: 7000022 },
	{ $max: { price: 27500 } }
)
 

 

$unset
To delete the colors field from the document with prodid 7000022:

db.product_catalog.update(
	{ prodid: 7000022 },
	{ $unset: {colors: ""} }
)

$addToSet
Add 'white' color to the colors field of the document with prodid '7000020':

db.product_catalog.update(
	{ prodid: 7000020 },
	{ $addToSet: { colors: "white" } }
)
$addToSet ensures that the values inserted are unique [Note: white color does not exist in the current set]

$push allows duplicate values inserted into the array.

Delete

Delete operation allows you to delete the documents from a collection that is no longer valid. You can specify criteria or filters to delete documents.

Syntax:
db.collection.remove(
	{ <<remove criteria>> }
)
 

 

Requirement 2.4 implementation
Delete the product with prodname 'xperia z':

db.product_catalog.deleteOne(
    {
        prodname: "xperia z"
    }
)
 

 

To delete all the products having price less than '1000':

db.product_catalog.remove(
    {
        price: {$lt : 1000 } 
    }
)
 

 

To delete all the documents from the product_catalog collection:

db.product_catalog.remove( {} )
Alternatively, db.collection.deleteMany() is used for deleting multiple documents matching the given criteria.
 

 

$pop
Remove the first element of the colors field from prodid '7000020' (use -1 to remove the value at the beginning of the array):

db.product_catalog.update(
	{ prodid: 7000020 },
	{ $pop: { colors: -1 } }
)
 

 

$pullAll
Delete all occurences of 'white' and 'gold' from the colors array:

db.product_catalog.update(
	{ prodid: 7000020 },
	{ $pullAll: { colors: ['white','gold'] } }
)

In the below query, you will insert a new document with prodid '200025', update the price of 'galaxy 7' from '45000' to '40000' and deletes all the mobiles that comes under the 'smartphones' sub category whose price is less than '4000'

db.product_catalog.bulkWrite(
      [
         { insertOne :
            {
               "document" :
               {
                  "prodid":200025,"prodname":"MacBook Air","manufacturer":"apple","price":56000
               }
            }
         },
         { updateOne :
            {
               "filter" : { "prodname" : "galaxy 7" },
               "update" : { $inc: {"price" : -5000 } }
            }
         },
         { deleteMany :
            { "filter" : { "categories.sub" : "smartphones", "price": { $lt: 4000 } } }
         }
      ] 
)
